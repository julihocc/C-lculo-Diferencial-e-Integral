(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    269134,       4820]
NotebookOptionsPosition[    268594,       4802]
NotebookOutlinePosition[    269041,       4819]
CellTagsIndexPosition[    268998,       4816]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["x'(t)=(ln(t))/(xt)", "WolframAlphaLong",
 CellChangeTimes->{{3.860135577789652*^9, 3.860135599116176*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"ccd7d5f2-6253-4445-8c92-8d3f8be49eea"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "x'(t)=(ln(t))/(xt)", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"x'[t] == Log[t]/(x[t] t)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 SuperscriptBox["x", "\[Prime]", MultilineFunction -> None], 
                 "(", "t", ")"}], "\[LongEqual]", 
               TagBox[
                FractionBox[
                 RowBox[{"log", "(", "t", ")"}], 
                 RowBox[{
                   RowBox[{"x", "(", "t", ")"}], " ", "t"}]], Identity]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Separable equation", "scanner" -> "ODE", "id" -> 
     "SeparableEquation", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                RowBox[{
                  RowBox[{
                    SuperscriptBox[
                    "x", "\[Prime]", MultilineFunction -> None], "(", "t", 
                    ")"}], " ", 
                  RowBox[{"x", "(", "t", ")"}]}], "\[LongEqual]", 
                TagBox[
                 FractionBox[
                  RowBox[{"log", "(", "t", ")"}], "t"], Identity]}], 
              HoldForm], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "ODE classification", "scanner" -> "ODE", "id" -> 
     "ODEClassification", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"first\[Hyphen]order nonlinear ordinary differential equation\"",
             TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate form assuming t is positive", "scanner" -> 
     "Simplification", "id" -> "PositiveAlternateForm", "position" -> "400", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"FullSimplify[x'[t] == Log[t]/(t x[t]), t > 0]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FractionBox[
               RowBox[{"log", "(", "t", ")"}], 
               RowBox[{"x", "(", "t", ")"}]], "\[LongEqual]", 
              RowBox[{"t", " ", 
                RowBox[{
                  SuperscriptBox["x", "\[Prime]", MultilineFunction -> None], 
                  "(", "t", ")"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Differential equation solutions", "scanner" -> "ODE", 
     "id" -> "Solution", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"DSolve[{x'[t] == Log[t]/(t x[t])}, x[t], t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"x", "(", "t", ")"}], "\[LongEqual]", 
              RowBox[{"-", 
                SqrtBox[
                 RowBox[{
                   SubscriptBox["c", "1"], "+", 
                   RowBox[{
                    SuperscriptBox["log", "2"], "(", "t", ")"}]}]]}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"DSolve[{x'[t] == Log[t]/(t x[t])}, x[t], t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"x", "(", "t", ")"}], "\[LongEqual]", 
              SqrtBox[
               RowBox[{
                 SubscriptBox["c", "1"], "+", 
                 RowBox[{
                   SuperscriptBox["log", "2"], "(", "t", ")"}]}]]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Solution__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Slope field", "scanner" -> "ODE", "id" -> "SlopeField",
      "position" -> "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "VectorPlot[{1, Log[t]/(t x)}, {t, -1., 1.}, {x, -1.02, 1.02}, \
VectorStyle -> \"Segment\"]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{}}, {{
                Hue[0.67, 0.6, 0.6], 
                Directive[
                 RGBColor[0.24720000000000014`, 0.24, 0.6]], {
                 
                 LineBox[{{0.10719364903982508`, -1.0684147187889783`}, {
                  0.11195814440613054`, -0.9742812737702214}}], 
                 
                 LineBox[{{0.10745733901914395`, -0.9551315426895977}, {
                  0.11169445442681167`, -0.8609728854125476}}], 
                 
                 LineBox[{{0.10772122853083915`, -0.8418468945267468}, {
                  0.11143056491511648`, -0.7476659691183438}}], 
                 LineBox[{{0.10798529288626359`, -0.7285607711568478}, {
                  0.11116650055969203`, -0.6343605280311881}}], 
                 
                 LineBox[{{0.10824950731453468`, -0.6152731698496164}, {
                  0.11090228613142095`, -0.5210565648813649}}], 
                 
                 LineBox[{{0.10851384697408828`, -0.5019840882902011}, {
                  0.11063794647186732`, -0.4077540819837256}}], 
                 
                 LineBox[{{0.10877828696431027`, -0.3886935245810003}, {
                  0.11037350648164533`, -0.2944530812358717}}], 
                 
                 LineBox[{{0.10904280233723296`, -0.2754014772431538}, {
                  0.11010899110872267`, -0.18115356411666364`}}], 
                 
                 LineBox[{{0.10930736810928357`, -0.16210794521770563`}, {
                  0.10984442533667205`, -0.06785553168505709}}], 
                 
                 LineBox[{{0.10957195927307212`, -0.04881292786643843}, {
                  0.10957983417288349`, 0.04544101542073037}}], 
                 
                 LineBox[{{0.10931524263675033`, 0.1587360769837222}, {
                  0.1098365508092053, 0.06448357502762442}}], 
                 
                 LineBox[{{0.10905067574784184`, 0.27202965320835365`}, {
                  0.11010111769811376`, 0.17778156326004763`}}], 
                 
                 LineBox[{{0.10878615851407603`, 0.38532174472031094`}, {
                  0.1103656349318796, 0.2910810362051449}}], 
                 
                 LineBox[{{0.10852171591990477`, 0.4986123525660382}, {
                  0.11063007752605085`, 0.4043819928164723}}], 
                 
                 LineBox[{{0.10825737291452533`, 0.6119014782119138}, {
                  0.11089442053143028`, 0.5176844316276514}}], 
                 
                 LineBox[{{0.10799315440013034`, 0.7251891235430965}, {
                  0.11115863904582526`, 0.6309883507535234}}], 
                 
                 LineBox[{{0.10772908522020967`, 0.8384752908620441}, {
                  0.11142270822574593`, 0.7442937478916306}}], 
                 
                 LineBox[{{0.10746519014791678`, 0.9517599828867063}, {
                  0.11168660329803884`, 0.857600620324023}}], 
                 
                 LineBox[{{0.10720149387451222`, 1.0650432027483945`}, {
                  0.11195029957144341`, 0.9709089649193895}}], 
                 LineBox[{{0.2137197779219537, -1.0679593422878386`}, {
                  0.22762429446859744`, -0.9747366502713612}}], 
                 
                 LineBox[{{0.21447683353890623`, -0.9547702077563381}, {
                  0.22686723885164495`, -0.861334220345807}}], 
                 
                 LineBox[{{0.21523880099057988`, -0.8415691590130132}, {
                  0.2261052713999713, -0.7479437046320774}}], 
                 
                 LineBox[{{0.21600511118232318`, -0.7283559722042976}, {
                  0.225338961208228, -0.6345653269837385}}], 
                 
                 LineBox[{{0.2167751779899932, -0.6151304501674387}, {
                  0.22456889440055797`, -0.5211992845635426}}], 
                 
                 LineBox[{{0.21754840038260592`, -0.5018924237158916}, {
                  0.22379567200794526`, -0.407845746558035}}], 
                 
                 LineBox[{{0.21832416468095334`, -0.3886417527570443}, {
                  0.22301990770959787`, -0.2945048530598277}}], 
                 
                 LineBox[{{0.21910184693324475`, -0.27537832722799366`}, {
                  0.22224222545730643`, -0.18117671413182374`}}], 
                 
                 LineBox[{{0.21988081538690335`, -0.16210206783723263`}, {
                  0.2214632570036478, -0.06786140906553009}}], 
                 
                 LineBox[{{0.22066043303404134`, -0.04881292660251422}, {
                  0.22068363935650986`, 0.04544101415680616}}], 
                 
                 LineBox[{{0.21990401218365976`, 0.15873053918911634`}, {
                  0.22144006020689141`, 0.06448911282223027}}], 
                 
                 LineBox[{{0.21912501519193026`, 0.2720071814331282}, {
                  0.2222190571986209, 0.17780403503527312`}}], 
                 
                 LineBox[{{0.2183472855060322, 0.3852709879331927}, {
                  0.222996786884519, 0.2911317929922632}}], 
                 
                 LineBox[{{0.2175714550720095, 0.4985220370557249}, {
                  0.22377261731854167`, 0.40447230832678566`}}], 
                 
                 LineBox[{{0.21679814810992962`, 0.6117604379575284}, {
                  0.22454592428062153`, 0.5178254718820369}}], 
                 
                 LineBox[{{0.21602797863956252`, 0.7249863298500462}, {
                  0.22531609375098863`, 0.6311911444465736}}], 
                 LineBox[{{0.21526154810156753`, 0.8381998810691981}, {
                  0.22608252428898362`, 0.7445691576844765}}], 
                 
                 LineBox[{{0.21449944309510954`, 0.9514012879628732}, {
                  0.22684462929544164`, 0.8579593152478561}}], 
                 
                 LineBox[{{0.21374223325090877`, 1.0645907736103022`}, {
                  0.2276018391396424, 0.9713613940574818}}], 
                 
                 LineBox[{{0.31793237399176655`, -1.0663982134132217`}, {
                  0.3456039773433802, -0.9762977791459783}}], 
                 
                 LineBox[{{0.31935453115194307`, -0.9535148679731468}, {
                  0.34418182018320365`, -0.8625895601289986}}], 
                 
                 LineBox[{{0.32081407914947924`, -0.8405926537575062}, {
                  0.34272227218566753`, -0.7489202098875843}}], 
                 
                 LineBox[{{0.3223077173150285, -0.7276282919375304}, {
                  0.34122863402011827`, -0.6352930072505055}}], 
                 
                 LineBox[{{0.3238316562320543, -0.6146187491306171}, {
                  0.3397046951030924, -0.5217109856003642}}], 
                 
                 LineBox[{{0.3253816497682978, -0.5015613088871405}, {
                  0.33815470156684896`, -0.40817686138678627`}}], 
                 
                 LineBox[{{0.32695304209575, -0.3884536395164876}, {
                  0.3365833092393968, -0.29469296630038444`}}], 
                 
                 LineBox[{{0.3285408290401385, -0.27529385513449056`}, {
                  0.33499552229500834`, -0.1812611862253268}}], 
                 
                 LineBox[{{0.33013973224727966`, -0.16208056692752948`}, {
                  0.33339661908786705`, -0.06788290997523323}}], 
                 
                 LineBox[{{0.33174428383455073`, -0.048812921974735766`}, {
                  0.33179206750059603`, 0.04544100952902771}}], 
                 
                 LineBox[{{0.330187432844951, 0.15871027954836703`}, {
                  0.33334891849019577`, 0.0645093724629796}}], 
                 
                 LineBox[{{0.3285882818712114, 0.27192517594002474`}, {
                  0.3349480694639353, 0.1778860405283765}}], 
                 
                 LineBox[{{0.32700008671980013`, 0.385086535227193}, {
                  0.3365362646153467, 0.2913162456982629}}], 
                 LineBox[{{0.3254281326528057, 0.4981957307671704}, {
                  0.3381082186823411, 0.4047986146153402}}], 
                 
                 LineBox[{{0.3238774331339015, 0.6112546343348234}, {
                  0.3396589182012453, 0.5183312755047419}}], 
                 
                 LineBox[{{0.3223526553124177, 0.7242655651926914}, {
                  0.34118369602272913`, 0.6319119091039286}}], 
                 
                 LineBox[{{0.3208580582663365, 0.8372312292924893}, {
                  0.34267829306881026`, 0.7455378094611853}}], 
                 
                 LineBox[{{0.31939744554212834`, 0.9501546516058004}, {
                  0.3441389057930184, 0.8592059516049289}}], 
                 
                 LineBox[{{0.3179741326755906, 1.0630391047017174`}, {
                  0.3455622186595562, 0.9729130629660668}}], 
                 
                 LineBox[{{0.4199842720736846, -1.0625481795448255`}, {
                  0.46574435820605775`, -0.9801478130143744}}], 
                 
                 LineBox[{{0.4220005177585501, -0.9503092067342949}, {
                  0.4637281125211923, -0.8657952213678504}}], 
                 
                 LineBox[{{0.4241699874726398, -0.8380169633133732}, {
                  0.46155864280710257`, -0.7514959003317175}}], 
                 
                 LineBox[{{0.4264901932669529, -0.7256515944208661}, {
                  0.4592384370127895, -0.6372697047671698}}], 
                 
                 LineBox[{{0.4289540899279742, -0.6131921602704947}, {
                  0.4567745403517681, -0.5231375744604867}}], 
                 
                 LineBox[{{0.4315495027464429, -0.5006175986898673}, {
                  0.4541791275332995, -0.40912057158405934`}}], 
                 
                 LineBox[{{0.434258865949173, -0.38790793052132433`}, {
                  0.45146976433056935`, -0.2952386752955477}}], 
                 
                 LineBox[{{0.4370593885104464, -0.2750456112826446}, {
                  0.44866924176929596`, -0.1815094300771728}}], 
                 
                 LineBox[{{0.43992371984609363`, -0.1620168781994137}, {
                  0.44580491043364867`, -0.06794659870334901}}], 
                 
                 LineBox[{{0.4428211135634674, -0.04881290822934938}, {
                  0.44290751671627504`, 0.04544099578364132}}], 
                 LineBox[{{0.44000963349109357`, 0.15865025823671103`}, {
                  0.4457189967886488, 0.06456939377463558}}], 
                 
                 LineBox[{{0.4371438610195265, 0.27168410624830697`}, {
                  0.4485847692602158, 0.1781271102200943}}], 
                 
                 LineBox[{{0.43434102435115135`, 0.3845512015295451}, {
                  0.451387605928591, 0.29185157939591083`}}], 
                 
                 LineBox[{{0.43162859426631645`, 0.4972651751411141}, {
                  0.45410003601342586`, 0.4057291702413964}}], 
                 
                 LineBox[{{0.42902950966268255`, 0.609843477993406}, {
                  0.4566991206170598, 0.5197424318461593}}], 
                 
                 LineBox[{{0.42656149658247544`, 0.7223060366914}, {
                  0.45916713369726686`, 0.6338714376052199}}], 
                 
                 LineBox[{{0.4242368882679129, 0.8346738995979558}, {
                  0.4614917420118294, 0.7480951391557188}}], 
                 
                 LineBox[{{0.42206287555736915`, 0.9469680253924667}, {
                  0.46366575472237315`, 0.8623925778182626}}], 
                 
                 LineBox[{{0.42004207174260627`, 1.0592083124677498`}, {
                  0.46568655853713603`, 0.9767438552000344}}], 
                 
                 LineBox[{{0.5213609998523009, -1.055380730832645}, {
                  0.586559909372037, -0.9873152617265548}}], 
                 
                 LineBox[{{0.5234048226913759, -0.9439312445524634}, {
                  0.584516086532962, -0.8721731835496818}}], 
                 
                 LineBox[{{0.5257962830416804, -0.832541758492389}, {
                  0.5821246261826576, -0.7569711051527016}}], 
                 
                 LineBox[{{0.5285813593696863, -0.7211702579586408}, {
                  0.5793395498546515, -0.6417510412293953}}], 
                 
                 LineBox[{{0.5317983444341262, -0.6097556397105075}, {
                  0.5761225647902116, -0.5265740950204739}}], 
                 
                 LineBox[{{0.5354682609553983, -0.49821640622557517`}, {
                  0.5724526482689395, -0.4115217640483515}}], 
                 
                 LineBox[{{0.5395830810631889, -0.38645361709663895`}, {
                  0.5683378281611491, -0.29669298872023314`}}], 
                 LineBox[{{0.5440944649282055, -0.2743602041885179}, {
                  0.5638264442961324, -0.18219483717129947`}}], 
                 
                 LineBox[{{0.5489077076664822, -0.1618370606688368}, {
                  0.5590132015578557, -0.06812641623392593}}], 
                 
                 LineBox[{{0.5538859376684557, -0.0488128691179697}, {
                  0.5540349715558822, 0.04544095667226164}}], 
                 
                 LineBox[{{0.5490542527586101, 0.15848071948095127`}, {
                  0.5588666564657278, 0.06473893253039532}}], 
                 
                 LineBox[{{0.5442339443537398, 0.2710179327255055}, {
                  0.5636869648705981, 0.1787932837428958}}], 
                 
                 LineBox[{{0.5397119777334467, 0.3831227926941281}, {
                  0.568208931490891, 0.29327998823132784`}}], 
                 
                 LineBox[{{0.5355844342303453, 0.49489387010851876`}, {
                  0.5723364749939925, 0.4081004752739918}}], 
                 
                 LineBox[{{0.5319009857587291, 0.6064382584449443}, {
                  0.5760199234656086, 0.5231476513946209}}], 
                 
                 LineBox[{{0.5286707101351708, 0.717855309744988}, {
                  0.579250199089167, 0.6383221645516319}}], 
                 
                 LineBox[{{0.5258732729161973, 0.8292271104109644}, {
                  0.5820476363081405, 0.7535419283427102}}], 
                 
                 LineBox[{{0.5234707425362036, 0.9406153670613152}, {
                  0.5844501666881342, 0.868745236149414}}], 
                 
                 LineBox[{{0.521417259495004, 1.0520626196415221`}, {
                  0.586503649729334, 0.9838895480262619}}], 
                 
                 LineBox[{{0.6246542273009906, -1.0456090809645886`}, {
                  0.7054589608679427, -0.9970869115946113}}], 
                 
                 LineBox[{{0.6260028599227626, -0.9344294261824876}, {
                  0.7041103282461708, -0.8816750019196576}}], 
                 
                 LineBox[{{0.627747018902434, -0.823547872764863}, {
                  0.7023661692664994, -0.7659649908802276}}], 
                 
                 LineBox[{{0.6300271700282289, -0.7129866852167693}, {
                  0.7000860181407046, -0.6499346139712666}}], 
                 
                 LineBox[{{0.6330293801015133, -0.6027366627526098}, {
                  0.69708380806742, -0.5335930719783715}}], 
                 
                 LineBox[{{0.6369826747128953, -0.49272151600893277`}, {
                  0.6931305134560382, -0.4170166542649939}}], 
                 
                 LineBox[{{0.6421262351694355, -0.3827455036247758}, {
                  0.6879869529994979, -0.30040110219209626`}}], 
                 
                 LineBox[{{0.6486173599524767, -0.27244428480127414`}, {
                  0.6814958282164567, -0.18411075655854323`}}], 
                 
                 LineBox[{{0.6563725906702801, -0.1613017077572986}, {
                  0.6737405974986533, -0.06866176914546412}}], 
                 
                 LineBox[{{0.6649270441972279, -0.048812749967235114`}, {
                  0.6651861439717055, 0.045440837521527055`}}], 
                 
                 LineBox[{{0.6566189719852449, 0.1579753089117042}, {
                  0.6734942161836884, 0.0652443430996424}}], 
                 
                 LineBox[{{0.6488312122122656, 0.26915138153403084`}, {
                  0.6812819759566677, 0.18065983493437043`}}], 
                 
                 LineBox[{{0.6422996127856787, 0.3794696745797752}, {
                  0.6878135753832547, 0.29693310634568076`}}], 
                 
                 LineBox[{{0.6371174638752688, 0.48944920129253305`}, {
                  0.6929957242936646, 0.41354514408997756`}}], 
                 
                 LineBox[{{0.6331320900215752, 0.5994596177550938}, {
                  0.6969810981473582, 0.5301262920844715}}], 
                 
                 LineBox[{{0.6301050544454464, 0.709701097842518}, {
                  0.700008133723487, 0.6464763764541018}}], 
                 
                 LineBox[{{0.6278063366063384, 0.8202526642706796}, {
                  0.702306851562595, 0.7625163744829951}}], 
                 
                 LineBox[{{0.6260484646429878, 0.9311249099268268}, {
                  0.7040647235259455, 0.8782356932839024}}], 
                 
                 LineBox[{{0.624689706450682, 1.0422961548568173`}, {
                  0.7054234817182513, 0.9936560128109669}}], 
                 
                 LineBox[{{0.7312635122114296, -1.0356975356035032`}, {
                  0.8210419549020994, -1.0069984569556967`}}], 
                 
                 LineBox[{{0.7318051968115017, -0.9239973530102125}, {
                  0.8205002703020274, -0.8921070750919327}}], 
                 LineBox[{{0.7325607384045945, -0.8126642354414122}, {
                  0.8197447287089346, -0.7768486282036784}}], 
                 
                 LineBox[{{0.7336518197565777, -0.7018229627717444}, {
                  0.8186536473569513, -0.6610983364162917}}], 
                 
                 LineBox[{{0.7352916955233325, -0.5916452217629257}, {
                  0.8170137715901964, -0.5446845129680556}}], 
                 
                 LineBox[{{0.7378670717341423, -0.482349251996037}, {
                  0.8144383953793867, -0.42738891827788966`}}], 
                 
                 LineBox[{{0.7420852311826378, -0.374136422442467}, {
                  0.8102202359308912, -0.30901018337440506`}}], 
                 
                 LineBox[{{0.7491482605437392, -0.26690018124449827`}, {
                  0.80315720656979, -0.1896548601153191}}], 
                 
                 LineBox[{{0.7604981945986519, -0.15943268761793633`}, {
                  0.791807272514877, -0.07053078928482638}}], 
                 
                 LineBox[{{0.7759093784803422, -0.048812299706149004`}, {
                  0.7763960886331868, 0.045440387260440945`}}], 
                 
                 LineBox[{{0.7609085916218773, 0.1562031843504732}, {
                  0.7913968754916517, 0.06701646766087341}}], 
                 
                 LineBox[{{0.7494181289725337, 0.2637155604310733}, {
                  0.8028873381409954, 0.18609565603732797`}}], 
                 
                 LineBox[{{0.742247043267784, 0.3709329598999922}, {
                  0.8100584238457451, 0.3054698210254637}}], 
                 
                 LineBox[{{0.7379642835892102, 0.47911227292417713`}, {
                  0.8143411835243188, 0.4238820724583335}}], 
                 
                 LineBox[{{0.7353522985191997, 0.5883784583603321}, {
                  0.8169531685943294, 0.5412074514792332}}], 
                 
                 LineBox[{{0.7336913178288953, 0.6985332876736646}, {
                  0.8186141492846338, 0.6576441866229554}}], 
                 
                 LineBox[{{0.7325875896159787, 0.8093575465347018}, {
                  0.8197178774975503, 0.7734114922189729}}], 
                 
                 LineBox[{{0.7318241419784308, 0.9206780339596703}, {
                  0.8204813251350983, 0.8886825692510589}}], 
                 LineBox[{{0.7312773140194128, 1.0323687275502282`}, {
                  0.8210281530941163, 1.003583440117556}}], 
                 
                 LineBox[{{0.8405272677352753, -1.02751590277778}, {
                  0.9339704783228493, -1.0151800897814198`}}], 
                 
                 LineBox[{{0.8406329890725055, -0.914973979342351}, {
                  0.9338647569856192, -0.9011304487597941}}], 
                 
                 LineBox[{{0.8407858056356549, -0.8026389974070742}, {
                  0.9337119404224697, -0.7868738662380164}}], 
                 
                 LineBox[{{0.8410181272250019, -0.6906077592030184}, {
                  0.9334796188331228, -0.6723135399850175}}], 
                 
                 LineBox[{{0.8413953805814021, -0.5790464436369267}, {
                  0.9331023654767225, -0.5572832910940546}}], 
                 
                 LineBox[{{0.8420651428265268, -0.46826244157899066`}, {
                  0.9324326032315979, -0.44147572869493595`}}], 
                 
                 LineBox[{{0.843413503865644, -0.35887682515408165`}, {
                  0.9310842421924805, -0.32426978066279033`}}], 
                 
                 LineBox[{{0.8466714189105266, -0.2522446166461881}, {
                  0.927826327147598, -0.2043104247136293}}], 
                 
                 LineBox[{{0.8566694079121396, -0.15084045824115674`}, {
                  0.917828338145985, -0.07912301866160598}}], 
                 
                 LineBox[{{0.8866596386026175, -0.04880924425106161}, {
                  0.8878381074555072, 0.04543733180535355}}], 
                 
                 LineBox[{{0.8571983192926557, 0.14791293457689703`}, {
                  0.9172994267654689, 0.07530671743444958}}], 
                 
                 LineBox[{{0.846829020316521, 0.2491375495203457}, {
                  0.9276687257416038, 0.20067366694805558`}}], 
                 
                 LineBox[{{0.8434725968958416, 0.355653872226269}, {
                  0.9310251491622831, 0.32074890869918693`}}], 
                 
                 LineBox[{{0.8420924745879655, 0.46498239243835754`}, {
                  0.932405271470159, 0.43801195294415296`}}], 
                 
                 LineBox[{{0.8414100121388179, 0.5757360031278255}, {
                  0.9330877339193066, 0.5538499067117398}}], 
                 LineBox[{{0.8410268069406331, 0.6872796064388397}, {
                  0.9334709391174916, 0.6688978678577802}}], 
                 
                 LineBox[{{0.8407913549477989, 0.7992997253455918}, {
                  0.9337063911103256, 0.7834693134080828}}], 
                 
                 LineBox[{{0.8406367436914799, 0.9116273060256316}, {
                  0.9338610023666447, 0.8977332971850976}}], 
                 
                 LineBox[{{0.8405299227969889, 1.024164069048142}, {
                  0.9339678232611357, 1.0117880986196424`}}]}}}}, {
             GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Epilog -> {
                DynamicBox[
                 Typeset`ToBoxes[
                  
                  DynamicModule[{
                   CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[
                    Hold[
                    Nearest[CompressedData["
1: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
RfhyJQUR7CFtEDPD+uG/cHiMrxPC/7lQ7Ro=
                    "] -> CompressedData["
1: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
fiQ62PQFz2mwTJSOWoP5KRt8WmepPQ3/AQlqB5A=
                    "]]]][#/{1.8886343710290623`, 2.039324080113492}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                   If[
                   CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                   TraditionalForm, Graphics]]}, DisplayFunction -> Identity, 
              AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, Frame -> True, FrameLabel -> {
                FormBox["t", TraditionalForm], 
                FormBox["x", TraditionalForm]}, FrameStyle -> Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              GridLinesStyle -> Automatic, ImageSize -> 250, 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "TransparentPolygonMesh" -> True}, 
              PlotRange -> {{-1.001385498, 
               0.8872488730290623}, {-1.0213479962796, 1.017976083833892}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.05], 
                 Scaled[0.05]}, {
                 Scaled[0.05], 
                 Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Fewer points", "input" -> "SlopeField__Fewer points"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More points", "input" -> "SlopeField__More points"}, {}], 
       XMLElement[
       "statelist", {
        "count" -> "3", "value" -> "Slope field", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Vector field", "input" -> 
           "SlopeField__Vector field"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Slope field", "input" -> "SlopeField__Slope field"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Direction field", "input" -> 
           "SlopeField__Direction field"}, {}]}]}]}], Typeset`pod7$$ = 
   XMLElement[
   "pod", {"title" -> "Plots of sample individual solution", "scanner" -> 
     "ODE", "id" -> "PlotsOfSampleIndividualSolution", "position" -> "700", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
Hiw=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2123876#1"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["t", TraditionalForm], 
                    FormBox["x", TraditionalForm], None, None}, 
                    DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["t", TraditionalForm], 
                    FormBox["x", TraditionalForm]}, AxesOrigin -> 
                    NCache[{Rational[1, 4] Pi, 1.}, {0.7853981633974483, 1.}],
                     AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"x", "(", "1", ")"}], "\[LongEqual]", "1"}], 
                    "}"}], TraditionalForm], PlotRange -> {All, All}, 
                    PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}}], "\" \"", 
                    GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2123902#1"]& ]}}, {}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "x", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm], None, None}, DisplayFunction -> 
                    Identity, PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "x", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm]}, AxesOrigin -> 
                    NCache[{Rational[1, 4] Pi, 0}, {0.7853981633974483, 0}], 
                    AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "ScalingFunctions" -> None}, PlotLabel -> FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"x", "(", "1", ")"}], "\[LongEqual]", "1"}], 
                    "}"}], TraditionalForm], PlotRange -> {All, All}, 
                    PlotRangeClipping -> True, 
                    PlotRangePadding -> {Automatic, Automatic}, 
                    Ticks -> {Automatic, Automatic}}], "\" \"", 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"x", "(", "1", ")"}], "\[LongEqual]", "1"}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Right}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Right}}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{None}}, "Rows" -> {None, None}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{2}}}], "Column"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Sample solution family", "scanner" -> "ODE", "id" -> 
     "SampleSolutionFamily", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
GP6JmA==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2723935#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2723961#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1:eJwd13c81d8fB3DZRPaWLURWtq/O28oImRmVEqUUQih7ZGVlJSTJrJSQSKUh
W2XvlJVV3Itkxe/c3/3nPp6P+zn3fM45r/M+n4/wOU/L8+RkZGSTe8jISN+7
//8soalz33gjG8eRc1VVqiAZAT2nOcdP8taLInGEnZG7K0jya6r+Wkfs0TxT
MZLvF+uZhGAfOcAmSfKdu8TvudhtacmHSM4aHfV5i63P3Kj0/+sdPe5tY+93
FdYl+dZ9dgX+PQR0LTzdmOSTShuNmtgaGzOWJFML8588iX31C98pksPOBxMC
sLn2yF8g+SP5/uhsbNkUMS+S329s8tVhV4VsBJHcuu5luIG911svk+QP5Hu/
c5MTUK9/XRHJZm4TvmrY5CPM1STvOWFS6I+d9cqxn2TW0THNTOxdpROzJKc2
lPe8xO5glN0i+UUdA+UadsJAiOhNbL2Ou/c4KAjIt+WvGsl8us7Kyti1nBbH
Sb7uUuV6Dft4e2EIyeO34esy9tG0zhmSc2feXWKlJCAbdxPKKGybJ8GUiti8
haXCJCcEv9Dwwm6VID9DMs9FpsdL2NUx6lMk52tHHGWiIqDrBrU00diDyYcn
ZbFXnLlkSJZNstjvgc1Q5edP8rVDgem/sD8/esUdg321eVyRgZqADI5r6pLc
9S26SxrbzyLXg+ScyASmy9hbl8lbSLb5EpU0h52yYR4Vi31FTeHuTxoCIvPf
lbqF7ckQpkFNS0BTM9HnSNa7wvhNHDu4ejGHZMOeSZHz2IMXzrDEY1fbh1ZM
YnOLNFInYN8Q8h7+QYfztpnPl0TKl/jjMDJ6AjqoKneO5M1GIQkhbPnOe49I
9h1tvXYG+zQ3j2YytmngXrYxbKM9dy7exma2Nz05speAnJXzf6diF0d7Um1h
82kp6aRhbzt2lvMyEFB8fkkmyU1sZlQO2Mlhcvrp2IRS9apB7AOZDY8zsC84
dPP2MxIQ1c/tvLukfOYz83Qx4fU3q1LMI+WZhr6dgK1TbVFA8pqKTjAzMwH5
+HWyP8A2+usxcRx7k8Zzk+RMrrryL9hPXOU7H2IffM51ooOFgOJ4PhUVk8bL
8LermY2AtA3kNp5hyye0x89gO28ORpVjq66O6dOwE9AsjTPbc+y8iI91R7F5
FLkVKrBZXgSVNGLzNlD7V2Hb6tYnNHAQUO7Aqkwttv9kUPQ7LgLyimLT/ogd
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
Nwupwf8Am8VZtg==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2723987#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1:eJwd1nc8ld8fAHDr2uvaeyV7dGUr52OFbFqSUTIiZaZEGaFkl6+sJCLSEEpm
pGRkJCorUpnposzid+7v/vO83q/zPPc553M+5/N5JE+ctfegoaKi+kZNRUW5
bv//9wupfu7bQfd0CnlXVqaLU5FRSeQ/aYoJ1fd2ImyFb/OyFHcSBmtcsD1L
WhQpflpsbHkJm+VMgSrFj24tfsnD1hdl203x85GRoAbsuR5BbYpfBdEzjmKn
817Tp/iNy5ncv9iTaREmFNfc5iGJUJNR4rSgJcXJ6uuv9bBPaByzp1hfUsTJ
CfsQr5EjxQ0eEeQwyrjeezeKaWlF47Kxr5QwnaKYfmNDuBa73nEmgGKh9QCz
dewzqQWxFPPTsnwRoCGjGZ6wVIrLfL6GaGOHfdnIodjzkGVRKPbwvj9VFIeP
jOllYpdNnmmhmLr1cf8z7MQ3qb0Uq9Sx0q1Q7PJu4f/r7bqVy0tLRve5p7co
zjdy19DAHmJ/wEGgzM+j0isY+8JH+d0Ux6RBzxJ2eAVzNMUm002nuOjISCbT
K5Ni6vIIOjXsLy2nH1JseKlKNwA7Zv7sMMWT3hxlv7BPxTsiemx/w+h9HAQy
+pi75khxeeruSRVsmTUUQjFrip3oGWzPyLaHFHuqXLw5jx308YUMA7bX2wk1
VnocH+GcfRS/G4vrU8Q2KJb2orjgSiKHL3Za4q4yiv17YpNnsJvyFbUZsSt0
SLd+MJCR5fijICZKPrBF6tIzktH7aJ7bFN/wYxvdia3rK9VOccGHSSkP7HI2
LUlmbGmnyxWT2CJZRp8p5pQKHBpnIiOVjhlvVmw12bJIKmYyetPRn0dxTpuE
rAT2HqJnP8USY+3Brtg9Z2OAjbLeCBbuMeyooAIpduzVo1ZOwyxkxJ/hQ8+J
nX71LGETu3H5kwnFC269j4VYyWjfrV+xFLfwWhOOYq8/5WUkYlM90Kn8hL2g
YsLDRdnfY++FBtnIiMGAZMmDzVLEKdjHQUZr7/bqCmLPMTF3krF1p6uSKU7Q
MYzg5CSjJ6YfJimeWj/z1QYbDbKkCmHvF6p93I39heRCFqbkSyX/oS4iGalN
pvSKYctxrva1cZORoIosx05s95TO61PYnL+Kz1N8dnXMhIGHjPb+6f5K8URs
S+0+bK0+/hcylP19Hl7yGvtJW6KfHPbHfY2Jr3ixH9GuKFLePxUe18RPRn9O
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
NDMJzA==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2724013#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
Mu+HsWO7FpzkkK5RimqqdP4h+B+BgFGz
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2724039#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2724065#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
dYyTkAFa3pD5mh5bg5XUX3fd0nXgfx7VSyU=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2724091#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
HmB/inyskotOFpmPfXV3AJn3wIaoHLLPQ40vvF1k7MbscTsF5Km42KJCZAVp
v6Z9yBmZmgZvu8mYzdJk7kFk/VvEGro+VF9fz8aYItNZ37t17R2qT7rV0/7I
Q5OvOK9/IGOmVVaLNchyGk1ODxdRvIhTdo7Va5io4VQmEwcFu/Mvj0d9zRom
1XmwRQm5peN9ZwPy+N7JWQtkoNQpNSFvTW9qpCPr7mP93YIs0P/koyCBgqlq
1ca/Rf48+Gi/MicFW88jvhpCNijVJlhxUzD96AfEOWRiDun5XX4KZtpaXMzz
eg3zojeylZWgYGyG5wuCkXs/ZJ92UKVgEebv69Vq0f7oxSm0aE/BPh0/HvGh
DtWTbOsxVgcK1v5qVu0j8sDqh1v7kanS8penkD8qDDBdQP6nKdtzpg4/jx3a
pjpGwUKZ7trNIo+Pqq7wOlKwOKsKjT/IESwp3AZOFIw1J1GcUI/ibXpYJ8eF
gg0cfBlqhvyuqZLT1ouC0YRQZBuQmbgNt3rDKZgmvXhlSQM6n10u1t3IpmC+
KcPhT5rWMCoj4y9C9ynYq12+qCLkl+UqcbrIxSfj40uQJcM+91xFvjk2c/c5
8uRwywm2HAp2vCe5ugp558/VJKlcCvamomW3A1lMi1vK8iEF44jOrPgXuZWY
p/q4gILFCzLelm9G9eZ97KjdMwq2YDxr/gJZ+dw5ndZGCvb8icCD1hYUrxNC
hNEZCubAv9LO0IbWu/t/+j/kVrA84+SrnF1rmMzNPCkW+RVMlC0pgAf5UlgF
7QHkvw/qHfmRnYKWOqORT4m8VBZFTnPotBVWWMH0b/6eUEB2seOMsFNcwbZ8
B7X18Od7GNnfKK9gjeOfpIKQvQ+O2uaRVrCaUo+kAeTYmEnD0zormDu/XXlK
9xo2tqi48NtyBTtiGGHH04vWu1nSuvuFFWx6q57jyMAa5rbdre39dgUrnOij
mI2i86DuPjZqt1+YIvG+TPh3FK92aBBi/Y05SlW2s62vYX3mggpHmn5jh8Jq
bRPZ1jFZvaOn433/YLWRzk4hsuvY4kyy2eV9q1jyJJ96mcE6dsydfqpvcRXr
yQoGuTPrWC1V792eF2vYZq0LiffqOva3/GN4evI6xuTbPX6idB1bCKNLW/Dc
wBhC9G2C3q9j2QEiOzMum9i0U5DMW+oNrINXI+7vqS3shevmuKPaBuZIW7Ui
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
2vA/Li8bzw==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2724117#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2724143#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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

                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2724169#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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

                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2724195#1"]& ]}}, {}}, {{{{}, {}, 
                   TagBox[{
                    Directive[
                    Opacity[1.], 
                    AbsoluteThickness[1], 
                    RGBColor[0.237736, 0.340215, 0.575113]], 
                    LineBox[CompressedData["
1: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
y5Xqag34Hyn+4O4=
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$2724221#1"]& ]}}, {}}}, {
               GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                Method -> {"GridLinesInFront" -> True}, PlotLabel -> None, 
                ImageSize -> 240, 
                PlotRange -> {{0., 616.7736419706486}, {-0.35982382783179134`,
                  7.269391475739002}}, PlotRange -> {Automatic, Automatic}, 
                AxesLabel -> {
                  FormBox["t", TraditionalForm], 
                  FormBox["x", TraditionalForm]}, PlotLabel -> FormBox[
                  RowBox[{"{", 
                    RowBox[{"x", "(", "1", ")"}], "}"}], TraditionalForm], 
                AxesOrigin -> {1, Automatic}, DisplayFunction -> Identity, 
                PlotRangePadding -> {{
                   Scaled[0.05], 
                   Scaled[0.05]}, {
                   Scaled[0.05], 
                   Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
                All, DisplayFunction -> Identity, AspectRatio -> 
                NCache[GoldenRatio^(-1), 0.6180339887498948], 
                Axes -> {True, True}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, AxesStyle -> Directive[
                  AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                DisplayFunction :> Identity, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  AbsoluteThickness[0.2]], 
                FrameTicks -> {{Automatic, Automatic}, {
                  Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                Method -> {
                 "DefaultGraphicsInteraction" -> {
                   "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                  "ScalingFunctions" -> None}, PlotRange -> {All, All}, 
                PlotRangeClipping -> True, 
                PlotRangePadding -> {Automatic, Automatic}, 
                Ticks -> {Automatic, Automatic}}], "\"  \"", 
              StyleBox[
               RowBox[{"\"(\"", "\[NoBreak]", 
                 TemplateBox[{"\"sampling \"", 
                   RowBox[{"x", "(", "1", ")"}]}, "RowDefault"], "\[NoBreak]",
                  "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Interactive differential equation solution plots", 
     "scanner" -> "ODE", "id" -> 
     "InteractiveDifferentialEquationSolutionPlots", "position" -> "900", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ = True, 
                 CalculateScan`ODEScan`Private`iSQ$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                 False, $CellContext`Y1$$ = 0.7853981633974483, 
                 CalculateScan`ODEScan`Private`yTS$$ = {1}, 
                 CalculateScan`ODEScan`Private`yyTS$$ = {1}, 
                 CalculateScan`ODEScan`Private`\[CapitalDelta]x$$ = 
                 0.2575795557527179, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[$CellContext`Y1$$], 0.7853981633974483, 
                    $CellContext`x[1]}, -1.5550883635269477`, 
                    1.5550883635269477`}, {{
                    Hold[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$], 
                    True, "show"}, {
                    True -> "solution or derivatives", False -> 
                    "generalized phase plots"}}, {{
                    Hold[CalculateScan`ODEScan`Private`yTS$$], {1}, ""}, 
                    Dynamic[
                    Map[# -> Dynamic[
                    Style[
                    Derivative[# - 1][$CellContext`x], 
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    Black, Gray]]]& , 
                    Range[1, 1 + 1]]]}, {{
                    Hold[CalculateScan`ODEScan`Private`yyTS$$], {1}, ""}, 
                    Dynamic[
                    MapIndexed[Part[#2, 1] -> Dynamic[
                    Style[
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
3806265[
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
3806265["`1` vs. `2`", 14246], {
                    Derivative[
                    Part[#, 1]][$CellContext`x], 
                    Derivative[
                    Part[#, 2]][$CellContext`x]}], 
                    If[
                    Not[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$],
                     Black, Gray]]]& , {{0, 1}}]]}, {{
                    Hold[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$], 
                    0.2575795557527179, 
                    Subscript["t", "max"]}, -1, 1}, {{
                    Hold[CalculateScan`ODEScan`Private`iSQ$$], True, ""}, {
                    True, False}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{
                    Style["Initial conditions:"], 
                    Manipulate`Place[1]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Manipulate`Place[2], 
                    Dynamic[
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ === 
                    True, 
                    Manipulate`Place[3], 
                    Manipulate`Place[4]]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
3806265["`1`\[Hyphen]range", {
                    Style["t", Italic]}], 
                    Manipulate`Place[5], 
                    Row[{
                    Manipulate`Place[6], " vertical image stabilization"}]}, 
                    Dividers -> {None, {
                    False, False, True, False, True, False, False}}], 
                    ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3812511$$ = 
                 False, $CellContext`Y1$3812516$$ = 0, 
                 CalculateScan`ODEScan`Private`functionOrPhasePlotQ$3812517$$ = 
                 False, CalculateScan`ODEScan`Private`\[CapitalDelta]x$\
3812518$$ = 0, CalculateScan`ODEScan`Private`iSQ$3812519$$ = False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ = 
                    True, CalculateScan`ODEScan`Private`iSQ$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, $CellContext`Y1$$ = 0.7853981633974483, 
                    CalculateScan`ODEScan`Private`yTS$$ = {1}, 
                    CalculateScan`ODEScan`Private`yyTS$$ = {1}, 
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$ = 
                    0.2575795557527179}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3812511$\
$, False], 
                    Hold[$CellContext`Y1$$, $CellContext`Y1$3812516$$, 0], 
                    Hold[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$\
3812517$$, False], 
                    Hold[
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$, 
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$3812518$$, 
                    0], 
                    Hold[
                    CalculateScan`ODEScan`Private`iSQ$$, 
                    CalculateScan`ODEScan`Private`iSQ$3812519$$, False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> 
                  Module[{
                    CalculateScan`ODEScan`Private`eqs$, 
                    CalculateScan`ODEScan`Private`sol$, 
                    CalculateScan`ODEScan`Private`addInits$, 
                    CalculateScan`ODEScan`Private`nds$, 
                    CalculateScan`ODEScan`Private`xRanges$, 
                    CalculateScan`ODEScan`Private`xRange$, 
                    CalculateScan`ODEScan`Private`IsPurelyRealQ$, 
                    CalculateScan`ODEScan`Private`yPlotRe$, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$, 
                    CalculateScan`ODEScan`Private`yPlotReIm$, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$,
                     CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$, CalculateScan`ODEScan`Private`yyPPlotRe$}, 
                    CalculateScan`ODEScan`Private`eqs$ = 
                    Flatten[{{
                    Derivative[
                    1][$CellContext`x][$CellContext`t] == $CellContext`t^(-1) 
                    Log[$CellContext`t]/$CellContext`x[$CellContext`t]}, {}, 
                    CalculateScan`ODEScan`Private`addInits$ = Thread[{
                    $CellContext`x[1]} == Tan[{$CellContext`Y1$$}]]}]; 
                    CalculateScan`ODEScan`Private`sol$ = Quiet[
                    Check[CalculateScan`ODEScan`Private`nds$ = Quiet[
                    NDSolve[
                    CalculateScan`ODEScan`Private`eqs$, $CellContext`x, \
{$CellContext`t, 1, 1 + Sign[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]
                     Tan[0.999 Pi 2^(-1) 
                    Abs[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]^(1/
                    8)]}, PrecisionGoal -> ControlActive[4, Automatic], 
                    AccuracyGoal -> ControlActive[4, Automatic], MaxSteps -> 
                    ControlActive[10^4, 5 10^4]], {
                    MessageName[NDSolve, "mxst"], 
                    MessageName[NDSolve, "ndsz"]}], 
                    CalculateScan`ODEScan`Private`failedNDSolve = 
                    Hold[NDSolve][
                    CalculateScan`ODEScan`Private`eqs$, $CellContext`x, \
{$CellContext`t, 1, 1 + Sign[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]
                     Tan[0.999 Pi 2^(-1) 
                    Abs[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]^(1/
                    8)]}]; "$Failed"]]; If[
                    Or[
                    MatchQ[CalculateScan`ODEScan`Private`sol$, 
                    Blank[NDSolve]], CalculateScan`ODEScan`Private`sol$ === 
                    "$Failed", Chop[
                    Apply[Subtract, 
                    Part[CalculateScan`ODEScan`Private`nds$, 1, 1, 2, 1, 1]]] == 
                    0], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
3806265["could not numerically solve the differential equation for the \
specified parameters", 14242], 
                    CalculateScan`ODEScan`Private`xRanges$ = 
                    Map[Part[#, 1, 2, 1, 1]& , 
                    CalculateScan`ODEScan`Private`nds$]; 
                    CalculateScan`ODEScan`Private`xRange$ = {
                    1, 1 + Sign[
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$] Min[
                    Abs[
                    Apply[
                    Subtract, CalculateScan`ODEScan`Private`xRanges$, {1}]]]}; 
                    CalculateScan`ODEScan`Private`IsPurelyRealQ$ = Not[
                    MemberQ[
                    Cases[CalculateScan`ODEScan`Private`nds$, 
                    Blank[List], {0, Infinity}], 
                    Blank[Complex], {0, Infinity}]]; 
                    If[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    If[CalculateScan`ODEScan`Private`yTS$$ === {}, 
                    CalculateScan`ODEScan`Private`yTS$$ = {1}]; 
                    If[CalculateScan`ODEScan`Private`IsPurelyRealQ$, 
                    CalculateScan`ODEScan`Private`yPlotRe$ = Plot[
                    Evaluate[
                    ReplaceAll[
                    Map[Derivative[# - 1][$CellContext`x][$CellContext`t]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    CalculateScan`ODEScan`Private`nds$]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`t, 
                    CalculateScan`ODEScan`Private`xRange$}]], PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits$], 
                    PlotStyle -> Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], 
                    If[
                    Union[CalculateScan`ODEScan`Private`yTS$$] === {
                    1}, $CellContext`x, 
                    Superscript[$CellContext`x, "(n)"]]}, PlotRange -> 
                    Automatic, ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$ = 
                    Part[
                    Lookup[
                    AbsoluteOptions[
                    CalculateScan`ODEScan`Private`yPlotRe$, PlotRange], 
                    PlotRange], 2]; If[
                    And[
                    IntervalMemberQ[
                    Interval[
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe]\
, 
                    Interval[
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$]],
                     Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$]]/
                    Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe]\
] > 1/3], Null, CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe = 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$ + \
{(-1)/3, 1/3} Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe$]]]\
; Labeled[
                    If[CalculateScan`ODEScan`Private`iSQ$$, 
                    Show[
                    CalculateScan`ODEScan`Private`yPlotRe$, 
                    PlotRange -> {
                    Automatic, 
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe}\
], CalculateScan`ODEScan`Private`yPlotRe$], 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    MapIndexed[Derivative[# - 1][$CellContext`x][
                    RawBoxes[
                    FormBox["t", TraditionalForm]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], Right], 
                    CalculateScan`ODEScan`Private`yPlotReIm$ = Plot[
                    Evaluate[
                    ReplaceAll[
                    Join[
                    Map[Re[
                    Derivative[# - 1][$CellContext`x][$CellContext`t]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    Map[Im[
                    Derivative[# - 1][$CellContext`x][$CellContext`t]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], 
                    CalculateScan`ODEScan`Private`nds$]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`t, 
                    CalculateScan`ODEScan`Private`xRange$}]], PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits$], 
                    PlotRange -> Automatic, PlotStyle -> Join[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    (ReplaceAll[#, Pattern[CalculateScan`ODEScan`Private`col, 
                    Blank[RGBColor]] :> 
                    Apply[RGBColor, 1 - Apply[
                    List, CalculateScan`ODEScan`Private`col]]]& )[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]]], AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], 
                    If[
                    Union[CalculateScan`ODEScan`Private`yTS$$] === {
                    1}, $CellContext`x, 
                    Superscript[$CellContext`x, "(n)"]]}, PlotRange -> 
                    Automatic, ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$ = 
                    Part[
                    Lookup[
                    AbsoluteOptions[
                    CalculateScan`ODEScan`Private`yPlotReIm$, PlotRange], 
                    PlotRange], 2]; If[
                    And[
                    IntervalMemberQ[
                    Interval[
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$], 
                    Interval[
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$]\
], Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$]\
]/Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$]] > 1/3], Null, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$ = 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$ + \
{(-1)/3, 1/3} Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm$]\
]]; Labeled[
                    If[CalculateScan`ODEScan`Private`iSQ$$, 
                    Show[
                    CalculateScan`ODEScan`Private`yPlotReIm$, 
                    PlotRange -> {
                    Automatic, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm$}], CalculateScan`ODEScan`Private`yPlotReIm$], 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    Join[
                    MapIndexed[Re[
                    Derivative[# - 1][$CellContext`x][
                    RawBoxes[
                    FormBox["t", TraditionalForm]]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    MapIndexed[Im[
                    Derivative[# - 1][$CellContext`x][
                    RawBoxes[
                    FormBox["t", TraditionalForm]]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], 
                    Join[
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    
                    MapIndexed[(
                    ReplaceAll[#, Pattern[CalculateScan`ODEScan`Private`col, 
                    Blank[RGBColor]] :> 
                    Apply[RGBColor, 1 - Apply[
                    List, CalculateScan`ODEScan`Private`col]]]& )[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]]], Right]], 
                    If[CalculateScan`ODEScan`Private`yyTS$$ === {}, 
                    CalculateScan`ODEScan`Private`yyTS$$ = {1}]; 
                    CalculateScan`ODEScan`Private`yyPPlotRe$ = ParametricPlot[
                    Evaluate[
                    Map[ReplaceAll[#, CalculateScan`ODEScan`Private`nds$]& , 
                    Re[
                    Apply[{
                    Derivative[#][$CellContext`x][$CellContext`t], 
                    Derivative[#2][$CellContext`x][$CellContext`t]}& , 
                    Part[{{0, 1}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]], {1}]]]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`t, 
                    CalculateScan`ODEScan`Private`xRange$}]], AxesLabel -> {
                    Superscript[$CellContext`x, 
                    Row[{"(", 
                    Style["m", Italic], ")"}]], 
                    Superscript[$CellContext`x, 
                    Row[{"(", 
                    Style["n", Italic], ")"}]]}, PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits$], 
                    PlotStyle -> Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]], AspectRatio -> 
                    1/GoldenRatio, PlotRange -> Automatic, 
                    ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    Labeled[CalculateScan`ODEScan`Private`yyPPlotRe$, 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    MapIndexed[
                    Map[If[CalculateScan`ODEScan`Private`IsPurelyRealQ$, 
                    Identity[
                    Blank[Slot]], 
                    Re[
                    Blank[Slot]]]& , {
                    Derivative[
                    Part[#, 1]][$CellContext`x], 
                    Derivative[
                    Part[#, 2]][$CellContext`x]}]& , 
                    Part[{{0, 1}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]]], 
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Part[{{0, 1}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]]]], Right]]]],
                   "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> 
                    None}, {{$CellContext`Y1$$, 0.7853981633974483, 
                    $CellContext`x[1]}, -1.5550883635269477`, 
                    1.5550883635269477`, ControlPlacement -> 1}, {{
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    True, "show"}, {
                    True -> "solution or derivatives", False -> 
                    "generalized phase plots"}, ControlPlacement -> 2}, {{
                    CalculateScan`ODEScan`Private`yTS$$, {1}, ""}, 
                    Dynamic[
                    Map[# -> Dynamic[
                    Style[
                    Derivative[# - 1][$CellContext`x], 
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    Black, Gray]]]& , 
                    Range[1, 1 + 1]]], ControlType -> CheckboxBar, 
                    ContinuousAction -> False, ControlPlacement -> 3}, {{
                    CalculateScan`ODEScan`Private`yyTS$$, {1}, ""}, 
                    Dynamic[
                    MapIndexed[Part[#2, 1] -> Dynamic[
                    Style[
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
3806265[
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
3806265["`1` vs. `2`", 14246], {
                    Derivative[
                    Part[#, 1]][$CellContext`x], 
                    Derivative[
                    Part[#, 2]][$CellContext`x]}], 
                    If[
                    Not[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$],
                     Black, Gray]]]& , {{0, 1}}]], ControlType -> CheckboxBar,
                     ContinuousAction -> False, ControlPlacement -> 4}, {{
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$, 
                    0.2575795557527179, 
                    Subscript["t", "max"]}, -1, 1, ControlPlacement -> 5}, {{
                    CalculateScan`ODEScan`Private`iSQ$$, True, ""}, {
                    True, False}, ControlPlacement -> 6}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{
                    Style["Initial conditions:"], 
                    Manipulate`Place[1]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Manipulate`Place[2], 
                    Dynamic[
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ === 
                    True, 
                    Manipulate`Place[3], 
                    Manipulate`Place[4]]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
3806265["`1`\[Hyphen]range", {
                    Style["t", Italic]}], 
                    Manipulate`Place[5], 
                    Row[{
                    Manipulate`Place[6], " vertical image stabilization"}]}, 
                    Dividers -> {None, {
                    False, False, True, False, True, False, False}}], 
                    ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMYIOJL0hAB2PSgJKU7/\
XiS2rh2sF2tsGfB5/dJM3aVYrpAE3ph1N9aR7fPffc9R4dyijt93o9fdmaD5LT9BqeHlozlLNcFoK+\
O8kVaM2kSC/hs5vWxGB2gZMfQL3vqjXvpZoR48+\
v8H3Ck4ITA18N48ww0JM9RfIpS3TtGSl2ZH8y4TIhnP2Ex9svn+\
5s7bzwMBjLiBgDSujttpD5VBENaQ+BrljzlhPxzR8flMdPBecxfC9AJKDvWe9YEWphpCAc8wm+\
9WIzdRsTM0RQoui50+TkOWx7gTaKiWwMsxzfOJusZ22Bicq05+ZOyc06Bfnwr+\
MDGbuYvMcl7c6OwLAwLhh9p2X1z7kb4Pl1W3glj1cTh/\
m94cgbMewI9DKdT1rXyTNSda2Lfs7Vec2XjQZ59pSp/5cOmDbLYWy1DQNmh7bGq7W3DP+\
8LbzMsevn4r5rzWfvKAFXDYdKcB8lLfg8imbKAy/R9unq3Do8xq2K7xidIRWscCIbZ9kvrj/uV+\
D1phBj7SYbkI6oZ0AEOVgXddzusoyZ4ZQokljg+XX9ssnGsg4l4M72tWeCMjvAPCHrlic0++\
lC3YlJpl/+qLiVXE41GfK+LwxkoNaK/gbWR1lyBR3LwEhivKCp12AOq6RGRAXLflCCxDkRDCHZL/\
tx3/zDxUogVXsK1aU8iwNXmpPwJPplgQ9AZGba3LEDR1dw22I2kTyuVRexNF2cNptjut9kunFDc6CH\
khBakvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AVJVuI4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, 
   Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, 
   Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, 
   Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, 
   Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, 
   Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, 
   Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, Typeset`pod37$$, 
   Typeset`pod38$$, Typeset`pod39$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False, False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`aux39$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "9", "datatypes" -> "", "timedout" -> "Recurrence", 
     "timedoutpods" -> "", "timing" -> "2.978", "parsetiming" -> "0.313", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa221522493c9i2c2aa6a700003912891afgb1b2hd8884920455003441207", "id" -> 
     "MSP221622493c9i2c2aa6a70000395fg134a0efi4hb", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "15", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa221722493c9i2c2aa6a7000055447ffbced02ied8884920455003441207", "version" -> 
     "2.6", "inputstring" -> "x'(t)=(ln(t))/(xt)"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "1", "datatypes" -> "", "timedout" -> "Recurrence", 
     "timedoutpods" -> "", "timing" -> "3.325", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "11", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "11", "related" -> "", 
     "version" -> "2.6", "inputstring" -> "x'(t)=(ln(t))/(xt)"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 4, 28, 6, 53, 28.3290288`9.204806598709812}, "Line" -> 1,
     "SessionID" -> 29904166127299147123}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9}, Typeset`failedpods$$ = {10, 11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 
   37, 38, 39}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "x'(t)=(ln(t))/(xt)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$}, Typeset`chosen$$,
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{704., {690.3544921875, 695.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$}, 
         Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa221522493c9i2c2aa6a700003912891afgb1b2hd8884920455003441207", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.86013560841265*^9},ExpressionUUID->"5b9dd3e1-0348-420a-b095-64797551632b"]
}, Open  ]]
},
WindowSize->{768., 507.75},
WindowMargins->{{-6, Automatic}, {Automatic, -6}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.0 for Microsoft Windows (64-bit) (February 4, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"1c7a40da-2be8-43a3-bf9b-6cdd5b0efc0b"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 190, 2, 41, "WolframAlphaLong",ExpressionUUID->"ccd7d5f2-6253-4445-8c92-8d3f8be49eea"],
Cell[773, 26, 267805, 4773, 1396, "Print",ExpressionUUID->"5b9dd3e1-0348-420a-b095-64797551632b"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

